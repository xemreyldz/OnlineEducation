// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using educationPlatformApi.Data;

#nullable disable

namespace educationPlatformApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250112142100_UpdateV19")]
    partial class UpdateV19
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("educationPlatformApi.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "HTML",
                            Url = "html"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "CSS",
                            Url = "css"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Javascript",
                            Url = "javascript"
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "React",
                            Url = "react"
                        },
                        new
                        {
                            CategoryID = 5,
                            Name = "Angular",
                            Url = "angular"
                        },
                        new
                        {
                            CategoryID = 6,
                            Name = "Java",
                            Url = "java"
                        },
                        new
                        {
                            CategoryID = 7,
                            Name = "C#",
                            Url = "csharp"
                        },
                        new
                        {
                            CategoryID = 8,
                            Name = "PHP",
                            Url = "php"
                        },
                        new
                        {
                            CategoryID = 9,
                            Name = "Python",
                            Url = "python"
                        },
                        new
                        {
                            CategoryID = 10,
                            Name = "SQL",
                            Url = "sql"
                        },
                        new
                        {
                            CategoryID = 11,
                            Name = "Asp.Net Core",
                            Url = "aspnetcore"
                        },
                        new
                        {
                            CategoryID = 12,
                            Name = "Swift",
                            Url = "swift"
                        },
                        new
                        {
                            CategoryID = 13,
                            Name = "Kotlin",
                            Url = "kotlin"
                        },
                        new
                        {
                            CategoryID = 14,
                            Name = "C++",
                            Url = "cplusplus"
                        });
                });

            modelBuilder.Entity("educationPlatformApi.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("FeedbackID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StudentUserID")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("StudentUserID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("educationPlatformApi.Models.CourseRating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("CourseRatings");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("educationPlatformApi.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("StudentID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("educationPlatformApi.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformUsage")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("PlatformUsage").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("educationPlatformApi.Models.Instructor", b =>
                {
                    b.HasBaseType("educationPlatformApi.Models.User");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("instructor");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Student", b =>
                {
                    b.HasBaseType("educationPlatformApi.Models.User");

                    b.Property<int?>("InstructorUserID")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("InstructorUserID");

                    b.HasDiscriminator().HasValue("student");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Comment", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.FeedBack", "Feedback")
                        .WithMany("Comments")
                        .HasForeignKey("FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("educationPlatformApi.Models.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Feedback");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Course", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.Student", null)
                        .WithMany("Courses")
                        .HasForeignKey("StudentUserID");

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("educationPlatformApi.Models.CourseRating", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.Student", "Student")
                        .WithMany("Ratings")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Enrollment", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("educationPlatformApi.Models.FeedBack", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("educationPlatformApi.Models.Instructor", "Instructor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("educationPlatformApi.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Notification", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Student", b =>
                {
                    b.HasOne("educationPlatformApi.Models.Instructor", null)
                        .WithMany("Students")
                        .HasForeignKey("InstructorUserID");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Course", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("educationPlatformApi.Models.FeedBack", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("educationPlatformApi.Models.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
